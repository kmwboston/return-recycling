angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(e){e.$on("login",function(t,n){e.currentUser=n})}]),angular.module("app").controller("ItemsCtrl",["$scope","ItemsSvc",function(e,t){t.fetch().success(function(t){e.items=t}),e.addItem=function(){e.itemName&&t.create("/api/items",{name:e.itemName,size:e.itemSize,brand:e.itemBrand,type:e.itemType}).success(function(t){e.items.unshift(t),e.itemName=null,e.itemSize=null,e.itemBrand=null,e.itemType=null})}}]),angular.module("app").service("ItemsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/items")},this.create=function(t){return e.post("/api/items",t)}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,t,n){e.login=function(r,i){t.login(r,i).then(function(t){e.$emit("login",t.data),n.path("/items")})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(e,t,n){e.register=function(r,i){t.register(r,i).then(function(t){e.$emit("login",t),n.path("/")})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/items",{controller:"ItemsCtrl",templateUrl:"items.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":this.token}})},t.login=function(n,r){return e.post("/api/sessions",{username:n,password:r}).then(function(n){return t.token=n.data,e.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(n,r){return e.post("/api/users",{username:n,password:r}).then(function(){return t.login(n,r)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJpdGVtcy5jdHJsLmpzIiwiaXRlbXMuc3ZjLmpzIiwibG9naW4uY3RybC5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJJdGVtc1N2YyIsImZldGNoIiwic3VjY2VzcyIsIml0ZW1zIiwiYWRkSXRlbSIsIml0ZW1OYW1lIiwiY3JlYXRlIiwibmFtZSIsInNpemUiLCJpdGVtU2l6ZSIsImJyYW5kIiwiaXRlbUJyYW5kIiwidHlwZSIsIml0ZW1UeXBlIiwiaXRlbSIsInVuc2hpZnQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwicG9zdCIsIlVzZXJTdmMiLCIkbG9jYXRpb24iLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJwYXRoIiwicmVnaXN0ZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJoZWFkZXJzIiwiWC1BdXRoIiwidG9rZW4iLCJ2YWwiLCJkZWZhdWx0cyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBR0FBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFLLEdBQ0FBLEVBQUFDLFFBQUFDLFFBQUEsU0FBQUMsR0FDQVIsRUFBQVEsTUFBQUEsSUFFQVIsRUFBQVMsUUFBQSxXQUNBVCxFQUFBVSxVQUNBTCxFQUFBTSxPQUFBLGNBQ0FDLEtBQUFaLEVBQUFVLFNBQ0FHLEtBQUFiLEVBQUFjLFNBQ0FDLE1BQUFmLEVBQUFnQixVQUNBQyxLQUFBakIsRUFBQWtCLFdBQ0FYLFFBQUEsU0FBQVksR0FDQW5CLEVBQUFRLE1BQUFZLFFBQUFELEdBQ0FuQixFQUFBVSxTQUFBLEtBQ0FWLEVBQUFjLFNBQUEsS0FDQWQsRUFBQWdCLFVBQUEsS0FDQWhCLEVBQUFrQixTQUFBLFdDakJBckIsUUFBQUMsT0FBQSxPQUNBdUIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQWpCLE1BQUEsV0FDQSxNQUFBZ0IsR0FBQUUsSUFBQSxlQUVBRCxLQUFBWixPQUFBLFNBQUFRLEdBQ0EsTUFBQUcsR0FBQUcsS0FBQSxhQUFBTixPQ05BdEIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQUMsRUFBQTBCLEVBQUFDLEdBQ0EzQixFQUFBNEIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBSixFQUFBRSxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FoQyxFQUFBaUMsTUFBQSxRQUFBRCxFQUFBRSxNQUNBUCxFQUFBUSxLQUFBLGdCQ05BdEMsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsVUFBQSxZQUFBLFNBQUFDLEVBQUEwQixFQUFBQyxHQUNBM0IsRUFBQW9DLFNBQUEsU0FBQVAsRUFBQUMsR0FDQUosRUFBQVUsU0FBQVAsRUFBQUMsR0FDQUMsS0FBQSxTQUFBNUIsR0FDQUgsRUFBQWlDLE1BQUEsUUFBQTlCLEdBQ0F3QixFQUFBUSxLQUFBLFdDTkF0QyxRQUFBQyxPQUFBLE9BQ0F1QyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsVUFBQXhDLFdBQUEsWUFBQXlDLFlBQUEsZUFDQUQsS0FBQSxhQUFBeEMsV0FBQSxlQUFBeUMsWUFBQSxrQkFDQUQsS0FBQSxLQUFBeEMsV0FBQSxZQUFBeUMsWUFBQSxrQkNMQTNDLFFBQUFDLE9BQUEsT0FDQXVCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQW1CLEdBQUFsQixJQUNBa0IsR0FBQUMsUUFBQSxXQUNBLE1BQUFwQixHQUFBRSxJQUFBLGNBQ0FtQixTQUFBQyxTQUFBckIsS0FBQXNCLFVBR0FKLEVBQUFiLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBUixHQUFBRyxLQUFBLGlCQUNBSSxTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUFlLEdBR0EsTUFGQUwsR0FBQUksTUFBQUMsRUFBQVosS0FDQVosRUFBQXlCLFNBQUFKLFFBQUFLLE9BQUEsVUFBQUYsRUFBQVosS0FDQU8sRUFBQUMsYUFHQUQsRUFBQUwsU0FBQSxTQUFBUCxFQUFBQyxHQUNBLE1BQUFSLEdBQUFHLEtBQUEsY0FDQUksU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxXQUNBLE1BQUFVLEdBQUFiLE1BQUFDLEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBUaWdqZXIgb24gMS8xOS8xNi5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdSb3V0ZSdcbl0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpZ2plciBvbiAxLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgfSlcbn0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpZ2plciBvbiAxLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdJdGVtc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEl0ZW1zU3ZjKSB7XG4gICAgSXRlbXNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKGl0ZW1zKXtcbiAgICAgICAgJHNjb3BlLml0ZW1zID0gaXRlbXNcbiAgICB9KVxuICAgICRzY29wZS5hZGRJdGVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkc2NvcGUuaXRlbU5hbWUpIHtcbiAgICAgICAgICAgIEl0ZW1zU3ZjLmNyZWF0ZSgnL2FwaS9pdGVtcycsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuaXRlbU5hbWUsXG4gICAgICAgICAgICAgICAgc2l6ZTogJHNjb3BlLml0ZW1TaXplLFxuICAgICAgICAgICAgICAgIGJyYW5kOiAkc2NvcGUuaXRlbUJyYW5kLFxuICAgICAgICAgICAgICAgIHR5cGU6ICRzY29wZS5pdGVtVHlwZVxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbXMudW5zaGlmdChpdGVtKVxuICAgICAgICAgICAgICAgICRzY29wZS5pdGVtTmFtZSA9IG51bGxcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbVNpemUgPSBudWxsXG4gICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1CcmFuZCA9IG51bGxcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbVR5cGUgPSBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxufSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgVGlnamVyIG9uIDEvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ0l0ZW1zU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvaXRlbXMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9pdGVtcycsIGl0ZW0pXG4gICAgfVxufSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgVGlnamVyIG9uIDEvMTkvMTYuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjLCAkbG9jYXRpb24pe1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvaXRlbXMnKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpZ2plciBvbiAxLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uKSB7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpZ2plciBvbiAxLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oJy9pdGVtcycsIHsgY29udHJvbGxlcjogJ0l0ZW1zQ3RybCcsIHRlbXBsYXRlVXJsOiAnaXRlbXMuaHRtbCcgfSlcbiAgICAgICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDoncmVnaXN0ZXIuaHRtbCcgfSlcbiAgICAgICAgICAgIC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IFRpZ2plciBvbiAxLzE5LzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICB2YXIgc3ZjID0gdGhpc1xuICAgICAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdYLUF1dGgnOiB0aGlzLnRva2VuIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuICAgICAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
